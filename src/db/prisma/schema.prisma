// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Gender enum
enum Gender {
  MALE
  FEMALE
  OTHER
}

// Roles enum
enum Role {
  ADMIN
  DOCTOR
  PATIENT
  RECEPTIONIST
}

// User base model
model User {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String
  name       String
  fatherName String?
  motherName String?
  dob        DateTime
  mobileNo   String
  address    String?
  gender     Gender
  role       Role

  doctor       Doctor?
  patient      Patient?
  receptionist Receptionist?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Doctor model
model Doctor {
  id String @id @default(cuid())

  specialization   String
  registrationNo   String            @unique
  yearOfExperience Int
  verified         Boolean           @default(false)
  patients         PatientOnDoctor[]

  isActive Boolean @default(true)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  MedicalRecord MedicalRecord[]
}

// Patient model
model Patient {
  id String @id @default(cuid())

  doctors  PatientOnDoctor[]
  records  MedicalRecord[]
  invoices Invoice[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Shift enum
enum Shift {
  MORNING
  AFTERNOON
  EVENING
  NIGHT
}

// Receptionist model
model Receptionist {
  id String @id @default(cuid())

  shift      Shift
  deskNumber String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Many-to-Many relation between Patients & Doctors (junction table)
model PatientOnDoctor {
  patientId String
  doctorId  String

  patient Patient @relation(fields: [patientId], references: [id])
  doctor  Doctor  @relation(fields: [doctorId], references: [id])

  @@id([patientId, doctorId])
}

// Medical records model
model MedicalRecord {
  id String @id @default(cuid())

  description String
  diagnosis   String
  treatment   String
  date        DateTime @default(now())

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Item type enum
enum ItemType {
  GOODS
  SERVICES
}

// Invoice item model
model InvoiceItem {
  id String @id @default(cuid())

  name        String
  description String?
  itemType    ItemType
  rate        Float

  InvoiceLine InvoiceLine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoiceLine {
  id String @id @default(cuid())

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  itemId String
  item   InvoiceItem @relation(fields: [itemId], references: [id])

  quantity Int
  rate     Float

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Invoice enum
enum InvoiceStatus {
  PENDING
  PAID
  ONHOLD
  CANCELLED
}

// Invoice model
model Invoice {
  id            String @id @default(cuid())
  invoiceNumber String @unique

  status      InvoiceStatus
  description String?
  dueDate     DateTime?

  subTotal   Float
  discount   Float?
  tax        Float?
  grandTotal Float

  items    InvoiceLine[]
  payments Payment[]

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Payment enum
enum PaymentMethod {
  CASH
  CARD
  UPI
  INSURANCE
}

// Payment model
model Payment {
  id String @id @default(cuid())

  amount Float
  method PaymentMethod
  date   DateTime      @default(now())

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  createdAt DateTime @default(now())
}

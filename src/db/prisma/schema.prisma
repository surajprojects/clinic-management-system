// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Roles enum
enum Role {
  DOCTOR
  PATIENT
  RECEPTIONIST
}

// User base model
model User {
  id         String  @id @default(cuid())
  email      String  @unique
  password   String
  fullName   String
  fatherName String?
  motherName String?
  mobileNo   String
  address    String?
  role       Role

  doctor       Doctor?
  patient      Patient?
  receptionist Receptionist?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Doctor model
model Doctor {
  id String @id @default(cuid())

  specialization String
  patients       PatientOnDoctor[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Patient model
model Patient {
  id String @id @default(cuid())

  doctors  PatientOnDoctor[]
  records  MedicalRecord[]
  invoices Invoice[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Receptionist model
model Receptionist {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Many-to-Many relation between Patients & Doctors
model PatientOnDoctor {
  patientId String @unique
  doctorId  String @unique

  patient Patient @relation(fields: [patientId], references: [id])
  doctor  Doctor  @relation(fields: [doctorId], references: [id])
}

// Medical Records
model MedicalRecord {
  id String @id @default(cuid())

  description String
  diagnosis   String
  treatment   String
  date        DateTime @default(now())

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Invoice 
enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
}

model Invoice {
  id String @id @default(uuid())

  amount   Float
  status   InvoiceStatus
  payments Payment[]

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Payment
enum PaymentMethod {
  CASH
  CARD
  UPI
  INSURANCE
}

model Payment {
  id String @id @default(uuid())

  amount Float
  method PaymentMethod
  date   DateTime      @default(now())

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  createdAt DateTime @default(now())
}
